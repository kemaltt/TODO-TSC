import React, { useState, useEffect } from 'react';
import TodoForm from './TodoForm';
import MobileHomePage from './MobileHomePage';
import type { Todo } from '../services/todoService';
import ThemeToggle from './ThemeToggle';
import { useTheme } from '../contexts/ThemeContext';

// Tema ve dil seçenekleri için tipler
type Theme = 'light' | 'dark' | 'system';
type Language = 'de' | 'en' | 'tr';
type SortOrder = 'creation' | 'priority' | 'dueDate';

interface Settings {
  theme: Theme;
  language: Language;
  notifications: boolean;
  sortOrder: SortOrder;
}

interface MobileLayoutProps {
  children: React.ReactNode;
  onAddTodo: (title: string, description: string, priority: 'low' | 'medium' | 'high') => void;
  todos: Todo[];
  onFilterChange: (filter: 'all' | 'active' | 'completed') => void;
}

// Settings bileşeni
const Settings: React.FC = () => {
  const [settings, setSettings] = useState<Settings>({
    theme: 'system',
    language: 'de',
    notifications: true,
    sortOrder: 'creation'
  });

  const [isPWAInstallable, setIsPWAInstallable] = useState<boolean>(false);
  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);

  // PWA yükleme olayını dinle
  useEffect(() => {
    const handleBeforeInstallPrompt = (e: Event) => {
      // Chrome + Mobile için yükleme promtunu engelle
      e.preventDefault();
      // Promptu daha sonra kullanmak üzere sakla
      setDeferredPrompt(e);
      // Yükleme butonunu göster
      setIsPWAInstallable(true);
    };

    // PWA yükleme olayını dinle
    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);

    // Eğer PWA zaten yüklüyse
    window.addEventListener('appinstalled', () => {
      // Yükleme butonunu gizle
      setIsPWAInstallable(false);
      // Promptu temizle
      setDeferredPrompt(null);
    });

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    };
  }, []);

  // PWA yükleme fonksiyonu
  const handleInstallClick = async () => {
    if (!deferredPrompt) return;

    // Yükleme promptunu göster
    deferredPrompt.prompt();
    
    // Kullanıcının yanıtını bekle
    const { outcome } = await deferredPrompt.userChoice;
    
    if (outcome === 'accepted') {
      console.log('PWA yüklendi');
    } else {
      console.log('PWA yükleme reddedildi');
    }
    
    // Promptu temizle
    setDeferredPrompt(null);
  };

  return (
    <div className="flex flex-col h-full">
      {/* Header mit ThemeToggle */}
      <div className="flex items-center justify-between p-4 border-b dark:border-gray-700">
        <h1 className="text-lg font-semibold dark:text-white">Einstellungen</h1>
        <ThemeToggle />
      </div>
      
      <div className="flex-1 overflow-auto p-4 space-y-6">
        {/* Tema Seçimi */}
        <div className="space-y-2">
          <h3 className="text-lg font-medium text-gray-900 dark:text-white">Erscheinungsbild</h3>
          <div className="bg-white dark:bg-gray-800 rounded-lg shadow p-4 space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-gray-700 dark:text-gray-300">Design</span>
              <select 
              value={settings.theme}
              onChange={(e) => setSettings({...settings, theme: e.target.value as Theme})}
              className="form-select rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
            >
              <option value="system">System</option>
              <option value="light">Hell</option>
              <option value="dark">Dunkel</option>
            </select>
          </div>
        </div>
      </div>

      {/* Sıralama Tercihleri */}
      <div className="space-y-2">
        <h3 className="text-lg font-medium text-gray-900">Sortierung</h3>
        <div className="bg-white rounded-lg shadow p-4">
          <select 
            value={settings.sortOrder}
            onChange={(e) => setSettings({...settings, sortOrder: e.target.value as SortOrder})}
            className="w-full form-select rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          >
            <option value="creation">Nach Erstellungsdatum</option>
            <option value="priority">Nach Priorität</option>
            <option value="dueDate">Nach Fälligkeit</option>
          </select>
        </div>
      </div>

      {/* Bildirim Ayarları */}
      <div className="space-y-2">
        <h3 className="text-lg font-medium text-gray-900">Benachrichtigungen</h3>
        <div className="bg-white rounded-lg shadow p-4">
          <label className="flex items-center space-x-3">
            <input
              type="checkbox"
              checked={settings.notifications}
              onChange={(e) => setSettings({...settings, notifications: e.target.checked})}
              className="form-checkbox h-5 w-5 text-indigo-600 rounded border-gray-300 focus:ring-indigo-500"
            />
            <span className="text-gray-700">Benachrichtigungen aktivieren</span>
          </label>
        </div>
      </div>

      {/* PWA Yükleme */}
      {isPWAInstallable && (
        <div className="space-y-2">
          <h3 className="text-lg font-medium text-gray-900">App Installation</h3>
          <div className="bg-white rounded-lg shadow p-4">
            <button 
              className="w-full bg-indigo-600 text-white py-2 px-4 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
              onClick={handleInstallClick}
            >
              Als App installieren
            </button>
            <p className="mt-2 text-sm text-gray-500">
              Installieren Sie die App auf Ihrem Gerät für schnelleren Zugriff und bessere Performance.
            </p>
          </div>
        </div>
      )}

      {/* Dil Seçimi */}
      <div className="space-y-2">
        <h3 className="text-lg font-medium text-gray-900">Sprache</h3>
        <div className="bg-white rounded-lg shadow p-4">
          <select 
            value={settings.language}
            onChange={(e) => setSettings({...settings, language: e.target.value as Language})}
            className="w-full form-select rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
          >
            <option value="de">Deutsch</option>
            <option value="en">English</option>
            <option value="tr">Türkçe</option>
          </select>
        </div>
      </div>

      {/* Uygulama Bilgileri */}
      <div className="space-y-2">
        <h3 className="text-lg font-medium text-gray-900">Info</h3>
        <div className="bg-white rounded-lg shadow p-4 space-y-2">
          <p className="text-sm text-gray-600">Version: 1.0.0</p>
          <p className="text-sm text-gray-600">© 2025 Todo App</p>
        </div>
      </div>
    </div>
  );
};

const MobileLayout: React.FC<MobileLayoutProps> = ({ 
  children, 
  onAddTodo, 
  todos,
  onFilterChange 
}) => {
  // Theme-Hook in einer Variablen speichern
  const themeContext = useTheme();
  const theme = themeContext ? themeContext.theme : 'light';
  const [activeTab, setActiveTab] = useState<'home' | 'todos' | 'settings'>('home');
  const [showAddForm, setShowAddForm] = useState(false);
  const [validationError, setValidationError] = useState<string | null>(null);
  
  const handleAddTodo = (title: string, description: string, priority: 'low' | 'medium' | 'high') => {
    onAddTodo(title, description, priority);
    setShowAddForm(false);
    setValidationError(null);
  };
  
  const handleAddTodoClick = () => {
    setShowAddForm(true);
  };

  const handleAllTodosClick = () => {
    setActiveTab('todos');
    onFilterChange('all');
  };

  const handleFilteredListClick = (filter: 'active' | 'completed') => {
    setActiveTab('todos');
    onFilterChange(filter);
  };

  return (
    <div className={`min-h-screen ${theme === 'dark' ? 'dark bg-gray-900' : 'bg-gray-50'}`}>
      {/* Header mit ThemeToggle rechts */}
      <header className="fixed top-0 left-0 right-0 bg-white dark:bg-gray-800 shadow-sm z-10">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <h1 className="text-xl font-semibold text-gray-900 dark:text-white">
              {activeTab === 'home' ? 'Home' : 
               activeTab === 'todos' ? 'Aufgaben' : 
               'Einstellungen'}
            </h1>
            <div className="ml-auto">
              <ThemeToggle />
            </div>
          </div>
        </div>
      </header>

      {/* Hauptinhalt mit Abstand für Header */}
      <main className="pt-16 pb-20 flex-1 relative z-0 overflow-y-auto dark:bg-gray-900">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          {activeTab === 'home' ? (
            <MobileHomePage
              todos={todos}
              onAddTodoClick={handleAddTodoClick}
              onAllTodosClick={handleAllTodosClick}
              onFilteredListClick={handleFilteredListClick}
            />
          ) : activeTab === 'todos' ? (
            children
          ) : (
            <Settings />
          )}
        </div>
      </main>

      {/* Bottom Navigation */}
      <nav className="fixed bottom-0 w-full bg-white dark:bg-gray-800 shadow-lg">
        <div className="max-w-7xl mx-auto px-4">
          <div className="flex justify-around h-16">
            <button
              onClick={() => setActiveTab('home')}
              className={`flex flex-col items-center justify-center w-full ${
                activeTab === 'home'
                  ? 'text-indigo-600 dark:text-indigo-400'
                  : 'text-gray-600 dark:text-gray-400'
              }`}
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
              </svg>
              <span className="text-xs mt-1">Home</span>
            </button>

            <button
              onClick={() => setActiveTab('todos')}
              className={`flex flex-col items-center justify-center w-full ${
                activeTab === 'todos'
                  ? 'text-indigo-600 dark:text-indigo-400'
                  : 'text-gray-600 dark:text-gray-400'
              }`}
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
              </svg>
              <span className="text-xs mt-1">Aufgaben</span>
            </button>

            <button
              onClick={() => setActiveTab('settings')}
              className={`flex flex-col items-center justify-center w-full ${
                activeTab === 'settings'
                  ? 'text-indigo-600 dark:text-indigo-400'
                  : 'text-gray-600 dark:text-gray-400'
              }`}
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
              <span className="text-xs mt-1">Einstellungen</span>
            </button>
          </div>
        </div>
      </nav>

      {/* Modal für das TodoForm */}
      {showAddForm && (
        <div className="fixed inset-0 z-50 overflow-y-auto">
          <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
            <div className="fixed inset-0 transition-opacity" aria-hidden="true">
              <div className="absolute inset-0 bg-gray-500 opacity-75"></div>
            </div>
            <div className="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6">
              <div className="flex justify-between items-center mb-4">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                  Neue Aufgabe
                </h3>
                <button
                  onClick={() => setShowAddForm(false)}
                  className="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
                >
                  <span className="sr-only">Schließen</span>
                  <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                  </svg>
                </button>
              </div>
              <TodoForm
                onAddTodo={handleAddTodo}
                validationError={validationError}
                onValidationError={setValidationError}
              />
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MobileLayout;
